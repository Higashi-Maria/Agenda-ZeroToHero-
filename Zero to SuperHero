#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_Contatos 50
#define M_Nome 128
#define M_Telefone 15
#define Arquivo_Csv "agenda0H.csv"

typedef struct {
    char nome[M_Nome];
    char telefone[M_Telefone];
} contato;

typedef struct no {
    contato info;
    struct no* prox;
} TNo;


TNo* novo_contato(TNo* lista);
void buscar_contato(TNo* lista);
TNo* deletar_contato(TNo* lista);
TNo* carregar_contatos(const char* Arquivo_Csv);
void salvar_contatos(TNo* lista, const char* arquivo_agenda);


void main (){
    TNo* lista = carregar_contatos(Arquivo_Csv);
    int registro;

    do {
        // Criação do MENU, chamando as funções
        printf("\n\n [MENU] \n\n");
        printf("[1]. Novo Contato\n");
        printf("[2]. Buscar Contato\n");
        printf("[3]. Deletar Contato\n");
        printf("[4]. Salvar Dados\n");
        printf("[0]. Sair\n");

        scanf("%d", &registro);
        getchar(); // Limpa o buffer do teclado após o scanf

        switch(registro) {
            case 1:
                novo_contato(lista);  
                break;
            case 2:
                buscar_contato(lista);  
                break;
            case 3:
                deletar_contato(lista);  
                break;
            case 4:
                salvar_contatos(lista, Arquivo_Csv);  
                break;
            case 0:
                break;
        }

    } while (registro != 0);
}

TNo* novo_contato(TNo* lista) {
    TNo* novo = malloc(sizeof(TNo));
    if(!novo) {
        printf("\nERRO\n");
        return lista;

    }

    printf("Digite o nome\n");
    fgets(novo -> nome, M_Nome, stdin);
    novo -> nome[strcspn(novo -> nome, "\n")] = 0;  // Remove o \n do nome

    printf("Digite o número de telefone. Exemplo: 63 99999-9999\n");
    fgets(novo -> telefone, M_Telefone, stdin);
    novo -> telefone[strcspn(novo -> telefone, "\n")] = 0; // Remove o \n do telefone

    novo -> prox = lista;
    return novo; //inicio da lista

}


void buscar_contato(TNo* lista) {
    char nomeBusca[M_Nome];
    printf("Digite o nome do contato a buscar: ");
    fgets(nomeBusca, M_Nome, stdin); // Lê a busca incluindo espaços
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0';

    TNo* atual = lista;
    int identificado = 0;

    while(atual) {
        if(strstr(atual -> nome, nomeBusca)==0) {
            printf(">> %s - %s\n, atual -> nome, atual -> telefone");
            identificado = 1;
        }
        atual = atual -> prox;

    }
    if(identificado != 1)
        printf("Contato não identificado\n");
}


TNo* deletar_contato(TNo* lista) {
    char nomeBusca[M_Nome];
    printf("Digite o nome do contato a buscar: ");
    fgets(nomeBusca, M_Nome, stdin); // Lê a busca incluindo espaços
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0';

    TNo* atual = lista;
    TNo* antecedente = NULL;

    while(atual) {
        if(strcmp(atual -> nome, no) == 0) {
            if(antecedente)
                antecedente -> prox = atual -> prox;
            else
                lista = atual -> prox;

            free(atual);
            printf("Contato removido com sucesso");      
            return lista;
        }   

        antecedente = atual;
        atual = atual -> prox;
    }
    printf("Contato não identificado\n");
    return lista;

}


void carregar_agenda(const char* arquivo_csv) {
    FILE* file = fopen(arquivo_csv, "r");
    if (!file) {
        printf("Arquivo não encontrado. Iniciando lista vazia.\n");
        return NULL;
    }

    TNo* lista = NULL;
    char linha[200];

    while (fgets(linha, sizeof(linha), file)) {
    TNo* novo = malloc(sizeof(TNo));
    if (!novo) break;

    linha[strcspn(linha, "\n")] = 0;
    char* token = strtok(linha, ",");
    if (token) strncpy(novo->info.nome, token, M_Nome);

    token = strtok(NULL, ",");
    if (token) strncpy(novo->info.telefone, token, M_Telefone);

    novo->prox = lista;
    lista = novo;
}

fclose(file);
return lista;
}

void salvar_contatos(TNo* lista, const char* arquivo_agenda) {
    FILE *arquivo = fopen(arquivo_agenda, "w");
    if (arquivo == NULL) {
        printf("Erro ao salvar o arquivo.\n");
        return;
    }

    TNo* atual = lista;
    while(atual != NULL) {
        fprintf(arquivo, "%s, %s\n", atual -> nome, atual -> telefone);
        atual = atual -> prox;

    }
    fclose(arquivo);
}





